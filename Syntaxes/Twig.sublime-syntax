%YAML 1.2
---
name: Twig
scope: text.twig
version: 2
hidden: true

###############################################################################

variables:
  identifiers: '[a-zA-Z_]+(?:\d*)?'
  modifiers: '(?:[-~])'

  statement_end: '({{modifiers}})?\%\}'
  expression_end: '({{modifiers}})?\}{2}'

###############################################################################

contexts:

###[ General ]#################################################################
  main:
    - include: twig

  else_pop:
    - match: (?=\S)
      pop: 1

  immediately_pop:
    - match: ''
      pop: 1

  block_pop:
    - match: '(?={{statement_end}}|{{expression_end}})'
      pop: 1

###[ Comments ]################################################################

  comment:
    - match: \{\#
      scope: punctuation.definition.comment.begin.twig
      push:
        - meta_scope: comment.block.twig
        - match: \#\}
          scope: punctuation.definition.comment.end.twig
          pop: 1

###[ Embedded ]################################################################

  twig_embedded:
    - include: verbatim_tag
    - include: statement_block
    - include: expression_block

  twig_embedded_in_string:
    - include: verbatim_tag
    - include: statement_block_embedded_in_string
    - include: expression_block_embedded_in_string

###[ Statements {% ]###########################################################

  statement_block:
    - match: '\{\%({{modifiers}})?'
      captures:
        0: punctuation.definition.statement.begin.twig
        1: punctuation.definition.modifier.twig
      push:
        - meta_scope: meta.statement.twig
        - include: statement_body

  statement_block_embedded_in_string:
    - match: '\{\%({{modifiers}})?'
      captures:
        0: punctuation.definition.statement.begin.twig
        1: punctuation.definition.modifier.twig
      push:
        - meta_scope: meta.statement.twig
        - clear_scopes: 1
        - include: statement_body

  statement_body:
    - match: '{{statement_end}}'
      captures:
        0: punctuation.definition.statement.end.twig
        1: punctuation.definition.modifier.twig
      pop: 1
    - include: twig

###[ Expressions {{ ]##########################################################

  expression_block:
    - match: '\{{2}({{modifiers}})?'
      captures:
        0: punctuation.definition.expression.begin.twig
        1: punctuation.definition.modifier.twig
      push:
        - meta_scope: meta.expression.twig
        - include: expression_body

  expression_block_embedded_in_string:
    - match: '\{{2}({{modifiers}})?'
      captures:
        0: punctuation.definition.expression.begin.twig
        1: punctuation.definition.modifier.twig
      push:
        - meta_scope: meta.expression.twig
        - clear_scopes: 1
        - include: expression_body

  expression_body:
    - match: '{{expression_end}}'
      captures:
        0: punctuation.definition.expression.end.twig
        1: punctuation.definition.modifier.twig
      pop: 1
    - include: twig

###[ Verbatim ]################################################################

  verbatim_tag:
    - match: (\{\%)\s*(\bverbatim\b)\s*(\%\})
      captures:
        0: meta.statement.twig
        1: punctuation.definition.statement.begin.twig
        2: keyword.other.twig
        3: punctuation.definition.statement.end.twig
      push:
        - meta_scope: constant.character.twig
        - match: (\{\%)\s*(\bendverbatim\b)\s*(\%\})
          captures:
            0: meta.statement.twig
            1: punctuation.definition.statement.begin.twig
            2: keyword.other.twig
            3: punctuation.definition.statement.end.twig
          pop: 1

###[ The language itself ]#####################################################

  twig:
    - include: block_pop
    - include: declare_variable
    - include: import_statements
    - include: get_item
    - include: data_structures
    - include: operators
    - include: logical_and_bitwise
    - include: builtin_tests
    - include: functions
    - include: constants
    - include: others
    - include: keywords
    - include: variables
    - include: filter
    - include: string
    - include: float
    - include: integer
    - include: ternary_operator

###[ Variables ]###############################################################

  variables:
    - match: \b_\b
      scope: variable.language.blank.twig
      push: variable_members
    - match: \b(_self|_context|_charset)\b
      scope: variable.language.twig
      push: variable_members
    - match: '{{identifiers}}(?=\s*=>)'
      scope: variable.parameter.function.twig
    - match: '{{identifiers}}'
      scope: variable.other.twig
      push: variable_members

  variable_members:
    - match: \.
      scope: punctuation.accessor.dot.twig
      push:
        - match: '{{identifiers}}'
          scope: meta.property.object.twig
        - include: immediately_pop
    - include: immediately_pop

###[ Declaration ]#############################################################

  declare_variable:
    - match: \bset\s+(?={{identifiers}})
      scope: keyword.declaration.twig
      push:
        - include: block_pop
        - match: '{{identifiers}}(?=\s*\=)'
          scope: meta.declaration.identifier.twig variable.other.twig
        - match: '='
          scope: keyword.operator.assignment.twig
          push:
            - meta_content_scope: meta.declaration.value.twig
            - include: twig
            - include: block_pop

###[ Filters ]#################################################################

  filter:
    - match: \|
      scope: keyword.operator.pipe.twig
      push:
        - meta_scope: meta.function.filter.twig
          # builtin filters
        - match: '(abs|batch|capitalize|column|convert_encoding|country_name|currency_name|currency_symbol|data_uri|date|date_modify|default|escape|filter|first|format|format_currency|format_date|format_datetime|format_number|format_time|html_to_markdown|inky_to_html|inline_css|join|json_encode|keys|language_name|last|length|locale_name|lower|map|markdown_to_html|merge|nl2br|number_format|raw|reduce|replace|reverse|round|slice|slug|sort|spaceless|split|striptags|timezone_name|title|trim|u|upper|url_encode)'
          scope: meta.function-call.identifier.twig support.function.filter.twig
          # custom filters
        - match: '{{identifiers}}'
          scope: meta.function-call.identifier.twig variable.function.filter.twig
          # filters with arguments
        - match: (?=\()
          push: functions_body
        - include: immediately_pop

###[ Filters ]###############################################################

  functions:
      # builtin functions
    - match: \b(attribute|block|constant|country_names|country_timezones|currency_names|cycle|date|dump|html_classes|include|language_names|locale_names|max|min|parent|random|range|script_names|source|template_from_string|timezone_names)(?=\()
      scope: meta.function-call.identifier.twig support.function.twig
      push: functions_body
      # custom functions
    - match: (\w+)(?=\()
      scope: meta.function-call.identifier.twig variable.function.twig
      push: functions_body

  functions_body:
    - match: \(
      scope: punctuation.section.group.begin.twig
      push:
        - meta_scope: meta.group.twig meta.function-call.arguments.twig
        - match: \)
          scope: punctuation.section.group.end.twig
          pop: 2
        - match: \,
          scope: punctuation.separator.parameters.twig
        - match: '({{identifiers}})\s*(=)'
          captures:
            1: variable.parameter.twig
            2: keyword.operator.assignment.twig
        - include: twig

###[ Operators ]###############################################################

  operators:
    - match: '\.{2}'
      scope: keyword.operator.range.twig
    - match: '\?{2}'
      scope: keyword.operator.null-coalescing.twig
    - match: '\?:'
      scope: keyword.operator.ternary.twig
    - match: \|(?=\s)
      scope: keyword.operator.logical.pipe.twig
    - match: \~
      scope: keyword.operator.concatenation.twig
    - match: \={2}
      scope: keyword.operator.comparison.twig
    - match: '[><!]='
      scope: keyword.operator.comparison.twig
    - match: '[><]'
      scope: keyword.operator.comparison.twig
    - match: '[\*\/]{2}'
      scope: keyword.operator.arithmetic.twig
    - match: '[\+\-\*\/\%]'
      scope: keyword.operator.arithmetic.twig
    - match: '=>'
      scope: keyword.declaration.function.arrow.twig
    - match: '='
      scope: keyword.operator.assignment.twig

###[ Language constants ]######################################################

  constants:
    - match: \b(true|false)\b
      scope: constant.language.boolean.twig
    - match: \b(none|null)\b
      scope: constant.language.null.twig

###[ Numbers ]#################################################################

  integer:
    - match: '(?:\d*_)?\d+'
      scope: meta.number.integer.decimal.twig
      captures:
        0: constant.numeric.value.twig

  float:
    - match: '(?:(?:\d*_?)*)?(\.)\d+(?:[eE]\d*)?'
      scope: meta.number.float.decimal.twig
      captures:
        0: constant.numeric.value.twig
        1: punctuation.separator.decimal.twig

###[ Keywords ]################################################################

  keywords:
    - match: \b((end)?if)\b
      scope: keyword.control.conditional.if.twig
    - match: \b(else)\b
      scope: keyword.control.conditional.else.twig
    - match: \b(elseif)\b
      scope: keyword.control.conditional.elseif.twig
    - match: \b((end)?for)\b
      scope: keyword.control.loop.for.twig
    - match: \b(continue)\b
      scope: keyword.control.flow.continue.twig
    - match: \b(break)\b
      scope: keyword.control.flow.break.twig
    - match: \b(in)\b
      scope: keyword.control.in.twig
    - match: \b((end)?apply)\b
      scope: support.function.apply.twig
    - match: \b((end)?block)\b
      scope: support.function.block.twig
      push:
        - match: '{{identifiers}}'
          scope: meta.generic-name.twig
        - include: block_pop
    - match: \b(starts|ends)\s+with\b
      scope: keyword.other.twig
    - match: \bhas\s+(every|some)\b
      scope: keyword.other.twig
    - match: \bmatches\b
      scope: keyword.other.twig
    # tags
    - match: '\b(end)?(apply|autoescape|block|cache|deprecated|do|embed|extends|flush|for|from|if|import|include|macro|sandbox|set|use|verbatim|with)\b'
      scope: keyword.other.twig

  others:
    - match: (\bignore\b)\s{1}(?=\bmissing\b)
      captures:
        1: keyword.other.twig
    - match: (\bmissing\b)(?!\bignore\b\s{1})
      captures:
        1: keyword.other.twig
    - match: (\bwith\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.twig
    - match: (\bcontext\b)(?!\bwith\b\s{1})
      captures:
        1: keyword.other.twig
    - match: (\bwithout\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.twig

  logical_and_bitwise:
    - match: '\b(?:and|or|not|is)\b'
      scope: keyword.operator.word.logical.twig
    - match: '\b(?:b-and|b-or|b-xor)\b'
      scope: keyword.operator.word.bitwise.twig

  ternary_operator:
    - match: '\?'
      scope: keyword.operator.ternary.twig
      push:
        - match: ':'
          scope: keyword.operator.ternary.twig
          pop: 1
        - include: twig
        - include: else_pop

  import_statements:
    - match: \b(import)\b
      scope: keyword.control.import.twig
      push:
        - meta_import
        - identifier_else_pop
        - import_alias
        - string_else_pop
    - match: \b(from)\b
      scope: keyword.control.import.from.twig
      push:
        - meta_import
        - identifier_else_pop
        - import_alias
        - identifier_else_pop
        - match_import
        - string_else_pop

  match_import:
    - match: \b(import)\b
      scope: keyword.control.import.twig
    - include: else_pop

  string_else_pop:
    - include: string
    - include: else_pop

  import_alias:
    - match: \b(as)\b
      scope: keyword.control.import.twig
    - include: else_pop

  identifier_else_pop:
    - include: variables
    - match: \,
      scope: punctuation.separator.comma.twig
    - include: immediately_pop

  meta_import:
    - meta_scope: meta.import.twig
    - include: immediately_pop

  builtin_tests:
    - match: '\b(constant|defined|divisible\s{1}by|empty|even|odd|iterable|odd|same\s{1}as)\b'
      scope: support.function.test.twig
      push: parameters_else_pop

  parameters_else_pop:
    - match: \(
      scope: punctuation.section.group.begin.twig
      set: parameters_body
    - include: else_pop

  parameters_body:
    - meta_scope: meta.function-call.arguments.twig
    - match: \)
      scope: punctuation.section.group.end.twig
      pop: 1
    - include: twig
    - match: \,
      scope: punctuation.separator.parameters.twig

  get_item:
    - match: (\w+)(\[)
      captures:
        1: meta.item-access.twig
        2: meta.item-access.twig punctuation.section.brackets.begin.twig
      push: get_item_body

  get_item_body:
    - meta_content_scope: meta.item-access.twig
    - match: \]
      scope: meta.item-access.twig punctuation.section.brackets.end.twig
      pop: 1
    - include: string
    - include: integer

###[ Data structures ]#########################################################

  data_structures:
    - include: array
    - include: dictionary
    - include: tuple_or_group

  array:
    - match: \[
      scope: punctuation.section.sequence.begin.twig
      push:
        - meta_scope: meta.sequence.array.twig
        - match: \]
          scope: punctuation.section.sequence.end.twig
          pop: 1
        - match: ','
          scope: punctuation.separator.sequence.twig
        - include: twig

  dictionary:
    - match: \{
      scope: punctuation.section.mapping.begin.twig
      push:
        - meta_scope: meta.mapping.twig
        - match: \}
          scope: punctuation.section.mapping.end.twig
          pop: 1
        - match: ':'
          scope: punctuation.separator.mapping.key-value.twig
        - match: ','
          scope: punctuation.separator.mapping.pair.twig
        - include: twig

  tuple_or_group:
    - match: (?=\()
      branch_point: tuple_or_group
      branch:
        - group
        - tuple_or_param

  tuple_or_param:
    - include: immediately_pop
    - match: (?=\()
      branch_point: tuple_or_param
      branch:
        - tuple
        - parameters

  group:
    - include: else_pop
    - match: \(
      scope: punctuation.section.group.begin.twig
      push:
        - meta_scope: meta.group.twig
        - match: \)
          scope: punctuation.section.group.end.twig
          pop: 1
        - include: twig
        - match: \,
          fail: tuple_or_group

  tuple:
    - match: (?==>)  # hold up, looks like an arrow function here
      fail: tuple_or_param
    - include: else_pop
    - match: \(
      scope: punctuation.section.sequence.begin.twig
      push:
        - meta_scope: meta.sequence.tuple.twig
        - match: \)
          scope: punctuation.section.sequence.end.twig
          pop: 1
        - include: twig
        - match: \,
          scope: punctuation.separator.sequence.twig

  parameters:
    - include: immediately_pop
    - match: \(
      scope: punctuation.section.sequence.begin.twig
      push:
        - meta_scope: meta.function.parameters.twig
        - match: \)
          scope: punctuation.section.sequence.end.twig
          pop: 1
        - match: '{{identifiers}}'
          scope: variable.parameter.twig
        - match: \,
          scope: punctuation.separator.sequence.twig


###[ Strings ]#################################################################

  string:
    - include: single_quoted_string
    - include: double_quoted_string

  single_quoted_string:
    - match: \'
      scope: punctuation.definition.string.begin.twig
      push: single_quoted_string_body

  single_quoted_string_body:
    - meta_include_prototype: false
    - meta_scope: meta.string.twig string.quoted.single.twig
    - match: \'
      scope: punctuation.definition.string.end.twig
      pop: 1
    - include: within_strings

  double_quoted_string:
    - match: \"
      scope: punctuation.definition.string.begin.twig
      push: double_quoted_string_body

  double_quoted_string_body:
    - meta_include_prototype: false
    - meta_scope: meta.string.twig string.quoted.double.twig
    - match: \"
      scope: punctuation.definition.string.end.twig
      pop: 1
    - include: within_strings

  within_strings:
    - include: escape_characters
    - include: printf_placeholder
    - include: string_interpolation

  string_interpolation:
    - match: (\#)(\{)
      captures:
        1: punctuation.definition.interpolation.twig
        2: punctuation.section.interpolation.begin.twig
      push:
        - clear_scopes: 1
        - meta_content_scope: text.embedded.twig
        - meta_scope: meta.interpolation.twig
        - match: \}
          scope: punctuation.section.interpolation.end.twig
          pop: 1
        - include: twig

  printf_placeholder:
    - match: \%[s]
      scope: constant.other.placeholder.twig

  escape_characters:
    - match: \{[\{\#]
      scope: constant.character.escape.twig
    - match: \\['"]
      scope: constant.character.escape.twig

